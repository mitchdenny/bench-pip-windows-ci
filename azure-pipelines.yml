trigger:
- master

jobs:
# - job: scenario1 # Disable Windows Defender, pre-install PIP 18.x create environment only.
#   pool:
#     vmImage: 'vs2017-win2016'
#   steps:
#   - task: UsePythonVersion@0
#     inputs:
#       versionSpec: '3.7'
#       architecture: 'x64'
#   - powershell: |
#       Set-MpPreference -DisableRealtimeMonitoring $true
#     displayName: Disable Windows Defender real-time scanning
#   - script: |
#       python -m pip install -U pip
#       python -m pip --version
#     displayName: Update PIP.
#   - script: |
#       python -m venv A
#     displayName: Create environment
# - job: scenario1a # Leave Windows Defender, pre-install PIP 18.x create environment only.
#   pool:
#     vmImage: 'vs2017-win2016'
#   steps:
#   - task: UsePythonVersion@0
#     inputs:
#       versionSpec: '3.7'
#       architecture: 'x64'
#   - script: |
#       python -m pip install -U pip
#       python -m pip --version
#     displayName: Update PIP.
#   - script: |
#       python -m venv A
#     displayName: Create environment
# - job: scenario2 # Disable Windows Defender, pre-install PIP 18.x create environment and install dependencies.
#   pool:
#     vmImage: 'vs2017-win2016'
#   steps:
#   - task: UsePythonVersion@0
#     inputs:
#       versionSpec: '3.7'
#       architecture: 'x64'
#   - powershell: |
#       Set-MpPreference -DisableRealtimeMonitoring $true
#     displayName: Disable Windows Defender real-time scanning
#   - script: |
#       python -m pip install -U pip
#       python -m pip --version
#     displayName: Update PIP.
#   - script: |
#       python -m venv A
#     displayName: Create environment
#   - script: |
#       call A\Scripts\activate.bat
#       python -m pip install -r requirements.txt
#     displayName: Activate and install dependencies.
# - job: scenario2a # Leave Windows Defender, pre-install PIP 18.x create environment and install dependencies.
#   pool:
#     vmImage: 'vs2017-win2016'
#   steps:
#   - task: UsePythonVersion@0
#     inputs:
#       versionSpec: '3.7'
#       architecture: 'x64'
#   - script: |
#       python -m pip install -U pip
#       python -m pip --version
#     displayName: Update PIP.
#   - script: |
#       python -m venv A
#     displayName: Create environment
#   - script: |
#       call A\Scripts\activate.bat
#       python -m pip install -r requirements.txt
#     displayName: Activate and install dependencies.
# - job: scenario3 # Disable Windows Defender, pre-install PIP 18.x create environment and install dependencies, then do it again.
#   pool:
#     vmImage: 'vs2017-win2016'
#   steps:
#   - task: UsePythonVersion@0
#     inputs:
#       versionSpec: '3.7'
#       architecture: 'x64'
#   - powershell: |
#       Set-MpPreference -DisableRealtimeMonitoring $true
#     displayName: Disable Windows Defender real-time scanning
#   - script: |
#       dir %USERPROFILE%\AppData\Local
#     displayName: List HTTP cache contents
#   - script: |
#       python -m pip install -U pip
#       python -m pip --version
#     displayName: Update PIP.
#   - script: |
#       dir %USERPROFILE%\AppData\Local\pip\cache /s /a
#     displayName: List HTTP cache contents
#   - script: |
#       python -m venv A
#     displayName: Create environment
#   - script: |
#       dir %USERPROFILE%\AppData\Local\pip\cache /s /a
#     displayName: List HTTP cache contents
#   - script: |
#       call A\Scripts\activate.bat
#       python -m pip install -r requirements.txt
#     displayName: Activate and install dependencies.
#   - script: |
#       dir %USERPROFILE%\AppData\Local\pip\cache /s /a
#     displayName: List HTTP cache contents
#   - script: |
#       python -m pip install -U pip
#       python -m pip --version
#     displayName: Update PIP.
#   - script: |
#       dir %USERPROFILE%\AppData\Local\pip\cache /s /a
#     displayName: List HTTP cache contents
#   - script: |
#       python -m venv B
#     displayName: Create environment
#   - script: |
#       dir %USERPROFILE%\AppData\Local\pip\cache /s /a
#     displayName: List HTTP cache contents
#   - script: |
#       call B\Scripts\activate.bat
#       python -m pip install -r requirements.txt
#     displayName: Activate and install dependencies.
#   - script: |
#       dir %USERPROFILE%\AppData\Local\pip\cache /s /a
#     displayName: List HTTP cache contents
# - job: scenario3a # Leave Windows Defender, pre-install PIP 18.x create environment and install dependencies, then do it again.
#   pool:
#     vmImage: 'vs2017-win2016'
#   steps:
#   - task: UsePythonVersion@0
#     inputs:
#       versionSpec: '3.7'
#       architecture: 'x64'
#   - script: |
#       dir %USERPROFILE%\AppData\Local
#     displayName: List HTTP cache contents
#   - script: |
#       python -m pip install -U pip
#       python -m pip --version
#     displayName: Update PIP.
#   - script: |
#       dir %USERPROFILE%\AppData\Local\pip\cache /s /a
#     displayName: List HTTP cache contents
#   - script: |
#       python -m venv A
#     displayName: Create environment
#   - script: |
#       dir %USERPROFILE%\AppData\Local\pip\cache /s /a
#     displayName: List HTTP cache contents
#   - script: |
#       call A\Scripts\activate.bat
#       python -m pip install -r requirements.txt
#     displayName: Activate and install dependencies.
#   - script: |
#       dir %USERPROFILE%\AppData\Local\pip\cache /s /a
#     displayName: List HTTP cache contents
#   - script: |
#       python -m pip install -U pip
#       python -m pip --version
#     displayName: Update PIP.
#   - script: |
#       dir %USERPROFILE%\AppData\Local\pip\cache /s /a
#     displayName: List HTTP cache contents
#   - script: |
#       python -m venv B
#     displayName: Create environment
#   - script: |
#       dir %USERPROFILE%\AppData\Local\pip\cache /s /a
#     displayName: List HTTP cache contents
#   - script: |
#       call B\Scripts\activate.bat
#       python -m pip install -r requirements.txt
#     displayName: Activate and install dependencies.
#   - script: |
#       dir %USERPROFILE%\AppData\Local\pip\cache /s /a
#     displayName: List HTTP cache contents
# - job: scenario4 # Run warm-up
#   pool:
#     vmImage: 'vs2017-win2016'
#   steps:
#   - task: UsePythonVersion@0
#     inputs:
#       versionSpec: '3.7'
#       architecture: 'x64'
#   - powershell: |
#       Set-MpPreference -DisableRealtimeMonitoring $true
#     displayName: Disable Windows Defender real-time scanning
#   - script: |
#       dotnet restore
#       dotnet build
#       dotnet run -r "C:\Program Files (x86)\Microsoft Visual Studio\Shared\Python36_64"
#       dotnet run -r "C:\Program Files (x86)\Microsoft Visual Studio\Shared\Python36_64"
#   - script: |
#       python -m pip install -U pip
#       python -m pip --version
#     displayName: Update PIP.
#   - script: |
#       python -m venv A
#     displayName: Create environment
#   - script: |
#       call A\Scripts\activate.bat
#       python -m pip install -r requirements.txt
#     displayName: Activate and install dependencies.
# - job: scenario5 # Run warm-up
#   pool:
#     vmImage: 'vs2017-win2016'
#   steps:
#   - task: UsePythonVersion@0
#     inputs:
#       versionSpec: '3.7'
#       architecture: 'x64'
#   - powershell: |
#       Set-MpPreference -DisableRealtimeMonitoring $true
#     displayName: Disable Windows Defender real-time scanning
#   - script: |
#       dotnet restore
#       dotnet build
#       dotnet run -r "C:\hostedtoolcache\windows\Python\3.7.0\x64"
#   - script: |
#       python -m pip install -U pip
#       python -m pip --version
#     displayName: Update PIP.
#   - script: |
#       python -m venv A
#     displayName: Create environment
#   - script: |
#       call A\Scripts\activate.bat
#       python -m pip install -r requirements.txt
#     displayName: Activate and install dependencies.
- job: scenario6 # Selective warm-up and install pip inside environment.
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.7'
      architecture: 'x64'
  - powershell: |
      Set-MpPreference -DisableRealtimeMonitoring $true
    displayName: Disable Windows Defender real-time scanning
  - script: |
      dotnet restore
      dotnet build
    displayName: Build warm-up app
  - script: |
      dotnet run -d "C:\hostedtoolcache\windows\Python\3.7.0\x64\Lib" -r "C:\hostedtoolcache\windows\Python\3.7.0\x64\Lib\ensurepip" -d "C:\hostedtoolcache\windows\Python\3.7.0\x64" -d "C:\hostedtoolcache\windows\Python\3.7.0\x64\DLLs" -d "C:\hostedtoolcache\windows\Python\3.7.0\x64\Lib\__pycache__" -r "C:\hostedtoolcache\windows\Python\3.7.0\x64\Lib\distutils" -r "C:\hostedtoolcache\windows\Python\3.7.0\x64\Lib\email" -r "C:\hostedtoolcache\windows\Python\3.7.0\x64\Lib\xml" -r "C:\hostedtoolcache\windows\Python\3.7.0\x64\Lib\encodings" -r "C:\hostedtoolcache\windows\Python\3.7.0\x64\Lib\importlib" -r "C:\hostedtoolcache\windows\Python\3.7.0\x64\Lib\venv" -r "C:\hostedtoolcache\windows\Python\3.7.0\x64\Lib\urllib" -r "C:\hostedtoolcache\windows\Python\3.7.0\x64\Lib\collections" -r "C:\hostedtoolcache\windows\Python\3.7.0\x64\Lib\json" -r "C:\hostedtoolcache\windows\Python\3.7.0\x64\Lib\xmlrpc" -r "C:\hostedtoolcache\windows\Python\3.7.0\x64\Lib\ctypes" -r "C:\hostedtoolcache\windows\Python\3.7.0\x64\Lib\xml" -r "C:\hostedtoolcache\windows\Python\3.7.0\x64\Lib\unittest" -r "C:\hostedtoolcache\windows\Python\3.7.0\x64\Lib\turtledemo" -r "C:\hostedtoolcache\windows\Python\3.7.0\x64\Lib\tkinter" -r "C:\hostedtoolcache\windows\Python\3.7.0\x64\Lib\test" -r "C:\hostedtoolcache\windows\Python\3.7.0\x64\Lib\sqlite3" -r "C:\hostedtoolcache\windows\Python\3.7.0\x64\Lib\site-packages\setuptools" -r  "C:\hostedtoolcache\windows\Python\3.7.0\x64\Lib\site-packages\pkg_resources" -r  "C:\hostedtoolcache\windows\Python\3.7.0\x64\Lib\site-packages\pip" -r  "C:\hostedtoolcache\windows\Python\3.7.0\x64\Lib\multiprocessing" -r  "C:\hostedtoolcache\windows\Python\3.7.0\x64\Lib\logging" -r  "C:\hostedtoolcache\windows\Python\3.7.0\x64\Lib\http" -r  "C:\hostedtoolcache\windows\Python\3.7.0\x64\Lib\html" -r  "C:\hostedtoolcache\windows\Python\3.7.0\x64\Lib\concurrent" -r  "C:\hostedtoolcache\windows\Python\3.7.0\x64\Lib\idlelib" -r  "C:\hostedtoolcache\windows\Python\3.7.0\x64\Lib\lib2to3" -r  "C:\hostedtoolcache\windows\Python\3.7.0\x64\tcl\tcl8.6"
    displayName: Warmup pass 1
  - script: |
      start $(System.DefaultWorkingDirectory)\tools\procmon.exe /quiet /accepteula /loadconfig $(System.DefaultWorkingDirectory)\tools\procmon.pmc /backingfile $(System.DefaultWorkingDirectory)\scenario6.pml
    displayName: Start procmon
  - script: |
      set TEMP=D:\
      python -m venv A
    displayName: Create environment A
  - script: |
      start $(System.DefaultWorkingDirectory)\tools\procmon.exe /terminate
    displayName: Stop procmon and upload logs.
  - task: PublishPipelineArtifact@0
    inputs:
      targetPath: $(System.DefaultWorkingDirectory)
# - script: |
#     call A\Scripts\activate.bat
#     python -m pip install -U pip
#     python -m pip --version
#     python -m pip install -r requirements.txt
#   displayName: Activate and install dependencies.
